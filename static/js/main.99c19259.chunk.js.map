{"version":3,"sources":["meow.mp3","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","kitty","state","contract","methods","AdoptCat","send","from","account","once","receipt","setState","kitties","concat","toConsumableArray","CatName","theCatId","GetCatName","then","console","log","playAudio","Audio","audio","play","totalSupply","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","KittyCat","networks","abi","address","Contract","i","_this2","react_default","a","createElement","className","href","target","rel","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","onClick","map","key","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qtoHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kqBCyKzBC,cA9Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KArBRQ,KAAO,SAACC,GACNR,EAAKS,MAAMC,SAASC,QAAQC,SAASJ,GAAOK,KAAK,CAAEC,KAAMd,EAAKS,MAAMM,UACnEC,KAAK,UAAW,SAACC,GAChBjB,EAAKkB,SAAS,CACZC,QAAO,GAAAC,OAAAnB,OAAAoB,EAAA,EAAApB,CAAMD,EAAKS,MAAMU,SAAjB,CAA0BX,SAgBpBR,EAXnBsB,QAAU,SAACC,GAETvB,EAAKS,MAAMC,SAASC,QAAQa,WAAWD,GAAUjB,KAAK,CAAEQ,KAAMd,EAAKS,MAAMM,UACxEU,KAAKC,QAAQC,MAQG3B,EAJnB4B,UAAY,WACV,IAAIC,MAAMC,KAAOC,QAKjB/B,EAAKS,MAAQ,CACXM,QAAS,GACTL,SAAU,KACVsB,YAAa,EACbb,QAAS,IANMnB,4MAjEXG,KAAK8B,kCACL9B,KAAK+B,sQAIPC,OAAOC,gCACTD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,mBACxBD,OAAOC,SAASG,sCAEfJ,OAAOE,KACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAGnCL,OAAOM,MAAM,wVAKTJ,EAAOF,OAAOE,cAEGA,EAAKK,IAAIC,4BAA1BC,SACNzC,KAAKe,SAAS,CAAEH,QAAS6B,EAAS,cAEVP,EAAKK,IAAIG,IAAIC,kBAA/BC,WACAC,EAAcC,EAASC,SAASH,4BAE9BI,EAAMF,EAASE,IACfC,EAAUJ,EAAYI,QACtB1C,EAAW,IAAI2B,EAAKK,IAAIW,SAASF,EAAKC,GAC5CjD,KAAKe,SAAS,CAAER,uBACUA,EAASC,QAAQqB,cAAc1B,eAAnD0B,SACN7B,KAAKe,SAAS,CAAEc,gBAEPsB,EAAI,eAAGA,GAAKtB,qCACCtB,EAASC,QAAQQ,QAAQmC,EAAI,GAAGhD,eAA9CE,SACNL,KAAKe,SAAS,CACZC,QAAO,GAAAC,OAAAnB,OAAAoB,EAAA,EAAApB,CAAME,KAAKM,MAAMU,SAAjB,CAA0BX,cAHH8C,oDAQlCnB,OAAOM,MAAM,yMAkCR,IAAAc,EAAApD,KACP,OACEqD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kEACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,sCACVC,KAAK,wBACLC,OAAO,SACPC,IAAI,uBAJN,oBAQAN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oDACZH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,QAAMK,GAAG,WAAW5D,KAAKM,MAAMM,aAInEyC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMM,KAAK,OAAOL,UAAU,gCAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,QAAMO,SAAU,SAACC,GACfA,EAAMC,iBACN,IAAM3D,EAAQ+C,EAAK/C,MAAM4D,MACzBb,EAAKhD,KAAKC,KAGVgD,EAAAC,EAAAC,cAAA,SACEW,KAAK,OACLV,UAAU,oBACVW,YAAY,WACZC,IAAK,SAACC,GAAYjB,EAAK/C,MAAQgE,KAEjChB,EAAAC,EAAAC,cAAA,SACEW,KAAK,SACLV,UAAU,4BACVc,QAAStE,KAAKyB,UACdwC,MAAM,YAIZZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,QAAMO,SAAU,SAACC,GACfA,EAAMC,iBACN,IAAM5C,EAAWgC,EAAKhC,SAAS6C,MAC/Bb,EAAKjC,QAAQC,KAGbiC,EAAAC,EAAAC,cAAA,SACEW,KAAK,OACLV,UAAU,oBACVW,YAAY,WACZC,IAAK,SAACC,GAAYjB,EAAKhC,SAAWiD,KAGpChB,EAAAC,EAAAC,cAAA,SACEW,KAAK,SACLV,UAAU,4BACVS,MAAM,qBAMhBZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXxD,KAAKM,MAAMU,QAAQuD,IAAI,SAAClE,EAAOmE,GAC/B,OACEnB,EAAAC,EAAAC,cAAA,OAAKiB,IAAKA,EAAKhB,UAAU,iBACvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,WAAMlD,gBAvJNoE,aCKEC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,KAAK,SAAAgE,GACjCA,EAAaC","file":"static/js/main.99c19259.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/meow.0771acf3.mp3\";","import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport KittyCat from '../abis/KittyCat.json'\nimport audio from '../meow.mp3';\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = KittyCat.networks[networkId]\n    if(networkData) {\n      const abi = KittyCat.abi\n      const address = networkData.address\n      const contract = new web3.eth.Contract(abi, address)\n      this.setState({ contract })\n      const totalSupply = await contract.methods.totalSupply().call()\n      this.setState({ totalSupply })\n    \n      for (var i = 1; i <= totalSupply; i++) {\n        const kitty = await contract.methods.kitties(i - 1).call()\n        this.setState({\n          kitties: [...this.state.kitties, kitty]\n        })\n      }\n\n    } else {\n      window.alert('Smart contract not deployed to detected network.')\n    }\n  }\n\n  mint = (kitty) => {\n    this.state.contract.methods.AdoptCat(kitty).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({\n        kitties: [...this.state.kitties, kitty]\n      })\n    })\n  }\n\n  CatName = (theCatId)=>{ \n\n    this.state.contract.methods.GetCatName(theCatId).call({ from: this.state.account })\n    .then(console.log)\n\n  }\n\n  playAudio = () => {\n    new Audio(audio).play();\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kitties: []\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"https://anterris.com/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Kitty Cat Tokens\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <h1>Adopt a Kitty</h1>\n                <form onSubmit={(event) => {\n                  event.preventDefault()\n                  const kitty = this.kitty.value\n                  this.mint(kitty)\n                  \n                }}>\n                  <input\n                    type='text'\n                    className='form-control mb-1'\n                    placeholder=\"Cat Name\"\n                    ref={(input) => { this.kitty = input }}\n                  />\n                  <input\n                    type='submit'\n                    className='btn btn-block btn-primary'\n                    onClick={this.playAudio}\n                    value='Adopt'\n                  />\n                </form>\n              </div>\n              <div className=\"content mr-auto ml-auto\">\n                <h1>Token Id</h1>\n                <form onSubmit={(event) => {\n                  event.preventDefault()\n                  const theCatId = this.theCatId.value\n                  this.CatName(theCatId)\n  \n                }}>\n                  <input\n                    type='text'\n                    className='form-control mb-1'\n                    placeholder=\"Token Id\"\n                    ref={(input) => { this.theCatId = input }}\n                    \n                  />\n                  <input\n                    type='submit'\n                    className='btn btn-block btn-primary'\n                    value='Get Cat Name'\n                  />\n                </form>\n              </div>\n            </main>\n          </div>\n          <hr/>\n          <div className=\"row text-center\">\n            { this.state.kitties.map((kitty, key) => {\n              return(\n                <div key={key} className=\"col-md-3 mb-3\">\n                  <div className=\"token\"></div>\n                  <div>{kitty}</div>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}