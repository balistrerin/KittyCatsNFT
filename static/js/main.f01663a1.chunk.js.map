{"version":3,"sources":["meow.mp3","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","kitty","fetch","concat","then","res","console","log","s3String","state","contract","methods","AdoptCat","send","from","account","once","receipt","setState","kitties","toConsumableArray","CatName","theCatId","GetCatName","playAudio","Audio","audio","play","totalSupply","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","KittyCat","networks","abi","address","Contract","i","_this2","react_default","a","createElement","className","href","target","rel","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","key","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f01663a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/meow.0771acf3.mp3\";","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\nimport './App.css';\r\nimport KittyCat from '../abis/KittyCat.json'\r\nimport audio from '../meow.mp3';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      contract: null,\r\n      totalSupply: 0,\r\n      kitties: []\r\n    }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    \r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n\r\n    const networkId = await web3.eth.net.getId()\r\n\r\n    const networkData = KittyCat.networks[networkId]\r\n    if(networkData) {\r\n      const abi = KittyCat.abi\r\n      const address = networkData.address\r\n      const contract = new web3.eth.Contract(abi, address)\r\n      this.setState({ contract })\r\n      const totalSupply = await contract.methods.totalSupply().call()\r\n      this.setState({ totalSupply })\r\n    \r\n      for (var i = 1; i <= totalSupply; i++) {\r\n        const kitty = await contract.methods.kitties(i - 1).call()\r\n        this.setState({\r\n          kitties: [...this.state.kitties, kitty]\r\n        })\r\n      }\r\n\r\n\r\n    } else {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  mint = (kitty) => {\r\n    fetch(`https://anterris.com/kittycatmeta.php?name=${kitty}`).then((res) => console.log(res));\r\n    var s3String = `https://anterrisbucket.s3.amazonaws.com/${kitty}.json`;\r\n    this.state.contract.methods.AdoptCat(kitty,s3String).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({\r\n        kitties: [...this.state.kitties, kitty]\r\n      })\r\n    })\r\n  }\r\n\r\n  CatName = (theCatId)=>{ \r\n\r\n    this.state.contract.methods.GetCatName(theCatId).call({ from: this.state.account })\r\n    .then(console.log)\r\n\r\n  }\r\n\r\n  playAudio = () => {\r\n    new Audio(audio).play();\r\n  }\r\n\r\n \r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"https://anterris.com/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Kitty Cat Token\r\n          </a>\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              <small className=\"text-white\"><span id=\"account\">Account: {this.state.account}</span></small>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <h1>Adopt a Kitty</h1>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const kitty = this.kitty.value\r\n                  this.mint(kitty)\r\n                  \r\n\r\n                  \r\n                }}>\r\n                  <input\r\n                    type='text'\r\n                    className='form-control mb-1'\r\n                    placeholder=\"Cat Name\"\r\n                    ref={(input) => { this.kitty = input }}\r\n                  />\r\n                  <input\r\n                    type='submit'\r\n                    className='btn btn-block btn-primary'\r\n                    //onClick={this.playAudio}\r\n                    value='Adopt'\r\n                  />\r\n                </form>\r\n              </div>\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <h1>Token Id</h1>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const theCatId = this.theCatId.value\r\n                  this.CatName(theCatId)\r\n  \r\n                }}>\r\n                  <input\r\n                    type='text'\r\n                    className='form-control mb-1'\r\n                    placeholder=\"Token Id\"\r\n                    ref={(input) => { this.theCatId = input }}\r\n                    \r\n                  />\r\n                  <input\r\n                    type='submit'\r\n                    className='btn btn-block btn-primary'\r\n                    value='Get Cat Name'\r\n                  />\r\n                </form>\r\n              </div>\r\n            </main>\r\n          </div>\r\n          <hr/>\r\n          <div className=\"row text-center\">\r\n            { this.state.kitties.map((kitty, key) => {\r\n              return(\r\n                <div key={key} className=\"col-md-3 mb-3\">\r\n                  <div className=\"token\"></div>\r\n                  <div>{kitty}</div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}